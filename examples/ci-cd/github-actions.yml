# CI/CD Pipeline for GitOps Ultra

name: GitOps Ultra CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'infrastructure/**'
      - 'kubernetes/**'
      - 'argocd/**'
      - 'bootstrap/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'kubernetes/**' 
      - 'argocd/**'
      - 'bootstrap/**'

env:
  # AWS Configuration
  AWS_DEFAULT_REGION: us-west-2
  # Pulumi Configuration  
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
  # Kubernetes Configuration
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

jobs:
  # Validation and Testing Jobs
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r infrastructure/pulumi/requirements.txt
        
    - name: Setup Pulumi
      uses: pulumi/action-install-pulumi-cli@v2
      with:
        pulumi-version: ^3.0.0
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
    - name: Validate Pulumi Configuration
      run: |
        cd infrastructure/pulumi
        python -m py_compile __main__.py
        echo "✅ Pulumi Python syntax is valid"
        
    - name: Validate Kubernetes Manifests
      run: |
        kubectl apply --dry-run=client --recursive -f kubernetes/
        echo "✅ Kubernetes manifests are valid"
        
    - name: Validate ArgoCD Applications
      run: |
        # Install ArgoCD CLI for validation
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
        
        # Validate ArgoCD applications (syntax only, no cluster connection)
        for file in argocd/*.yaml; do
          kubectl apply --dry-run=client -f "$file" || echo "⚠️  $file validation failed"
        done
        
    - name: Validate Kustomizations
      run: |
        kustomize build argocd-install/ > /dev/null
        echo "✅ ArgoCD installation kustomization is valid"
        
    - name: Lint YAML files
      uses: ibiqlik/action-yamllint@v3
      with:
        config_file: .yamllint.yml
        file_or_dir: |
          argocd/
          bootstrap/
          kubernetes/
          examples/
          
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Development Environment Deployment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl cluster-info
        
    - name: Setup Pulumi
      uses: pulumi/action-install-pulumi-cli@v2
      with:
        pulumi-version: ^3.0.0
        
    - name: Deploy Infrastructure (Development)
      run: |
        cd infrastructure/pulumi
        pulumi stack select dev --create
        pulumi config set aws:region ${{ env.AWS_DEFAULT_REGION }}
        pulumi config set project:prefix myapp-dev
        pulumi config set kubernetes:namespace myapp-dev
        pulumi up --yes
        
    - name: Update ArgoCD Applications
      run: |
        export KUBECONFIG=kubeconfig
        # Apply ArgoCD applications for development
        kubectl apply -f argocd/
        
    - name: Wait for sync
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for ArgoCD applications to sync
        kubectl wait --for=condition=Synced app/myapp-infrastructure -n argocd --timeout=600s

  # Staging Environment Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl cluster-info
        
    - name: Setup Pulumi
      uses: pulumi/action-install-pulumi-cli@v2
      with:
        pulumi-version: ^3.0.0
        
    - name: Deploy Infrastructure (Staging)
      run: |
        cd infrastructure/pulumi
        pulumi stack select staging --create
        pulumi config set aws:region ${{ env.AWS_DEFAULT_REGION }}
        pulumi config set project:prefix myapp-staging
        pulumi config set kubernetes:namespace myapp-staging
        pulumi up --yes
        
    - name: Run Integration Tests
      run: |
        # Run integration tests against staging environment
        echo "Running integration tests..."
        # Add your test commands here
        
    - name: Update ArgoCD Applications
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f argocd/
        
  # Production Environment Deployment (Manual)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl cluster-info
        
    - name: Backup Production State
      run: |
        # Backup Pulumi state and Kubernetes resources
        echo "Creating production backup..."
        # Add backup commands here
        
    - name: Plan Infrastructure Changes
      run: |
        cd infrastructure/pulumi
        pulumi stack select prod
        pulumi preview --diff
        
    - name: Deploy Infrastructure (Production)
      run: |
        cd infrastructure/pulumi
        pulumi up --yes
        
    - name: Update ArgoCD Applications (Manual Sync)
      run: |
        export KUBECONFIG=kubeconfig
        # Apply applications but don't auto-sync in production
        kubectl apply -f argocd/
        echo "⚠️  Production deployment requires manual ArgoCD sync"
        echo "Access ArgoCD UI to review and sync applications manually"
        
  # Cleanup Job (for PR cleanup)
  cleanup:
    name: Cleanup PR Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
    - name: Cleanup temporary resources
      run: |
        echo "Cleaning up PR environment resources..."
        # Add cleanup logic for PR-specific resources

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()
