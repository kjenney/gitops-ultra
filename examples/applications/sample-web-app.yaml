---
# Example web application deployment that uses AWS resources created by Pulumi
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-web-app
  namespace: myapp-dev
  labels:
    app.kubernetes.io/name: sample-web-app
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: myapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: sample-web-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sample-web-app
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: web
    spec:
      serviceAccountName: myapp-aws-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: web-app
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: myapp-dev-aws-resources
              key: AWS_REGION
        - name: S3_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: myapp-dev-aws-resources
              key: S3_BUCKET_NAME
        - name: SQS_QUEUE_URL
          valueFrom:
            configMapKeyRef:
              name: myapp-dev-aws-resources
              key: SQS_QUEUE_URL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: nginx-config
        configMap:
          name: nginx-config

---
# Service for the web application
apiVersion: v1
kind: Service
metadata:
  name: sample-web-app
  namespace: myapp-dev
  labels:
    app.kubernetes.io/name: sample-web-app
    app.kubernetes.io/component: service
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: sample-web-app

---
# ConfigMap for nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: myapp-dev
  labels:
    app.kubernetes.io/name: sample-web-app
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /dev/stdout main;
        error_log /dev/stderr;
        
        sendfile on;
        keepalive_timeout 65;
        
        server {
            listen 8080;
            server_name localhost;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /ready {
                access_log off;
                return 200 "ready\n";
                add_header Content-Type text/plain;
            }
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
                try_files $uri $uri/ =404;
            }
        }
    }

---
# HorizontalPodAutoscaler for the web application
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sample-web-app-hpa
  namespace: myapp-dev
  labels:
    app.kubernetes.io/name: sample-web-app
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sample-web-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
